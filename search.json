[{"title":"为你的网站加入深色模式","date":"2021-01-22T04:29:38.000Z","url":"/posts/175456095.html","tags":[["博客","/tags/%E5%8D%9A%E5%AE%A2/"],["Web","/tags/Web/"],["JavaScript","/tags/JavaScript/"],["CSS","/tags/CSS/"]],"categories":[["极客","/categories/%E6%9E%81%E5%AE%A2/"]],"content":" 转载文章原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持原文链接：原文作者：Sukka 前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。 无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。 什么是「深色模式」很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。 「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 prefers-color-scheme 的浏览器占有率已经高达 81.82%。 利用 Media Query 简单实现深色模式CSS 媒体查询 @media 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。Media Queries Level 5 草案 中提出了深色模式的判断方式 prefers-color-scheme，包含 light、dark、no-preference 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 prefers-color-scheme Media Query，无需额外的代码即可优雅降级。 还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 prefers-color-scheme，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过： CSS Variable 的方法实现深色模式 通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。 为深色模式单独编写样式 直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。 条件性加载深色模式的 CSS 文件 利用 &lt;link&gt; 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。 需要注意 CSS 选择器的权重，因此作为可选的 dark.css 一定要放在 main.css 之后加载。 除了上述三种方式以外，使用 CSS filter 或 mix-blend-mode 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。 「深色模式」的兼容性虽然有了优雅的 prefers-color-scheme 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观： 考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。 设计一个用户友好的「深色模式」受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle &lt;html&gt; 或&lt;body&gt; 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 prefers-color-scheme 也不够优雅。如果将「开关」和 prefers-color-scheme 结合起来，就可以带来更好的用户体验： 对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式 对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换 在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式 在将两者组合在一起时，不能简单地用「开关」覆盖 prefers-color-scheme，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 prefers-color-scheme 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。 Talk is cheap, here goes the code. 首先是 CSS： 真是令人看的头大，让我们逐行来看都是些什么： 在 :root 下定义了一个 CSS Variable --color-mode: light 和在浅色模式下用到的 CSS Variable（比如使用深色 #333 作为主要字体颜色）。 使用 prefers-color-scheme 的 Media Query 定义深色模式下的 CSS Variable： --color-mode: light 。深色模式的样式（如浅色 #eff 作为主要字体颜色）要定义在 :not([data-user-color-scheme]) 伪类下以避免「开关」的行为覆盖浏览器的样式。 为 [data-user-color-scheme=&#39;dark&#39;] 再定义一遍深色模式下用到的样式。有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 &lt;html&gt; 或 &lt;body&gt; 标签上没有 data-user-color-scheme 属性时、或者存在 data-user-color-scheme 属性且值为 dark 时。 然后是困难的部分了：编写 JavaScript 为「开关」添加行为。 先定义一些常量： 接下来，用 try &#123;&#125; catch (e) &#123;&#125; 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况： 我们还需要一个函数读取当前 prefers-color-scheme 的方法。由于已经在 CSS 中定义了 --color-mode，所以在 JS 中直接读取就好了： 还记得我们需要自动取消手动模式回到 prefers-color-scheme 么？意味着我们需要一个函数清掉 LS、删掉 &lt;html&gt; 存在的 data-user-color-scheme 属性： 接下来是起主要作用的函数了，负责为 &lt;html&gt; 标签修改 data-user-color-scheme 属性： 当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来： 相关的函数都定义完了，是时候添加函数执行了： 我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！ 转载文章原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持原文链接：原文作者：Sukka "},{"title":"懒加载你的评论插件","date":"2021-01-22T03:35:05.000Z","url":"/posts/270988717.html","tags":[["博客","/tags/%E5%8D%9A%E5%AE%A2/"],["Web","/tags/Web/"],["JavaScript","/tags/JavaScript/"]],"categories":[["极客","/categories/%E6%9E%81%E5%AE%A2/"]],"content":"前言打开博客的文章页面，加载完毕就花费了一秒多的时长，打开控制台一看： 全是评论的表情包 再加上之前使用的是 Valine + LeanCloud 国际版，更是拖慢速度。 我就决定懒加载评论插件，在评论区进入（或即将进入）可视范围时再加载。 实现 提示目前仅测试了 Twikoo 评论系统，其它评论系统理论上应该同样适用。 修改评论区代码找到并修改你的评论区代码，将原先的评论区代码放入 raw 属性值中，此处仅提供示例参考： 注意引入的代码文件不要懒加载，避免报错。 JS 实现懒加载 提示我这里给出的代码依赖 jQuery，因为我使用了它的选择器和一些 API，一定程度上会方便很多。实际上原生 JS 也是可以达到同样的效果。 使用 jQuery 选择页面中的懒加载元素： 再获取页面高度等数据，循环寻找出页面中所有的懒加载元素。 如果元素所在高度 小于等于 可见高度，就代表元素是可见的。 如果元素可见，就检查当前的内容是否被标记为已加载，避免重复的加载耗费资源。 如果未加载，就从 raw 属性中获取值，将其添加至 HTML 内容。 在页面刚加载完毕的时候先执行一次。再当页面滚动的时候重复执行。 别忘了在页面中引入这个 JS！ 可以看看：演示页面"},{"title":"JavaScript 为你的网页图片加入懒加载","date":"2021-01-15T03:46:00.000Z","url":"/posts/421506333.html","tags":[["博客","/tags/%E5%8D%9A%E5%AE%A2/"],["Web","/tags/Web/"],["JavaScript","/tags/JavaScript/"]],"categories":[["极客","/categories/%E6%9E%81%E5%AE%A2/"]],"content":"思路我们设置 srcset 为加载的动画，src 与 data-srcset 为真实的图片。 当图片在页面的可见范围内的时候，则将 data-srcset 的值更新到 srcset 中，否则不更新。 实现HTML我们新建一个 HTML 页面，随意输入一些文字用于占位，再在这些文字中加入些图片。 JS我这里给出的代码依赖 jQuery，因为我使用了它的选择器，一定程度上会方便很多。 一些代码的细节全在注释里了。 "},{"title":"博客更换新主题","date":"2021-01-13T10:15:49.000Z","url":"/posts/1987652759.html","tags":[["博客","/tags/%E5%8D%9A%E5%AE%A2/"]],"categories":[["博客","/categories/%E5%8D%9A%E5%AE%A2/"]],"content":"主题经过近一个月的开发，Miracle 主题已经发布至 v1.2.0 版本，也正式可以开始使用。 主题仓库：hifun-team/hexo-theme-miracle 主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。 Google PageSpeed 的移动得分可以达到 99 分，也是不错的成绩。 PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge] 评论评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！ 部署部署换回了直接部署 ( hexo d )，因为主题在 Action 部署时一直无法解析 Tag 插件，而本地又可以… 而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。"},{"title":"使用 CloudFlare 加速你的网站","date":"2020-12-15T08:19:29.000Z","url":"/posts/995700211.html","tags":[["博客","/tags/%E5%8D%9A%E5%AE%A2/"],["CDN","/tags/CDN/"],["CloudFlare","/tags/CloudFlare/"]],"categories":[["极客","/categories/%E6%9E%81%E5%AE%A2/"]],"content":"前言CloudFlare 为我们提供了免费的 CDN 服务，并拥有全球各地的优秀节点，作为国外比较优秀的 CDN 服务商。 但是，来自国内的访问都会被 CloudFlare 绕到大洋彼岸的美国。再加上某神秘的阻碍，导致在国内的访问一直不是很好。Ping 出延迟基本大于 &gt;= 200ms 。 在一次偶然的机会中，发现： CloudFlare 拥有很多节点。 CloudFlare 的节点之间速度非常之快。 CloudFlare 的节点之间几乎没有延迟。 CloudFlare 所有节点均免费，基本可以随便接入。 实践既然发现了这个好办法，那么就开始实践吧！ 首先，前往「CloudFlare Partner」的站点登录。 这里要注意！CloudFlare 官方已经停止 CNAME 接入，只能前往「CloudFlare Partner」接入。 以 萌精灵 CDN 为例，打开其官网： 并登录你的 CloudFlare 账号。 然后点击页面右上角的「添加域名」并加你的域名接入 CloudFlare 。 输入域名并点击「添加」即可添加成功。 接下来点击主页列表里的「管理 DNS」进入管理界面。 接下来点击「添加新记录」添加一个新的记录。 然后进入你域名的 DNS 管理系统，注意是解析域名的地方。 找到「CNAME 接入」处的对应 CNAME 地址，将其设为相应的解析地址。 加速访问虽然默认提供给我们的节点很慢，但我们可以从 CloudFlare 公开的节点中寻找访问速度快的节点。 我找到了几个国内速度不错的节点，可以参考参考： IP 地址 运营商 104.27.169.248 默认 104.19.19.119 移动 141.101.115.11 移动 104.16.245.1 联通 104.16.246.1 联通 104.20.157.19 电信 141.101.114.202 电信 然后再将原来的 CNAME 记录改为 A 记录到以上 IP，再配合智能运营商解析，达到提速。 如果你不想一个一个设置，可以直接将「默认」记录指向 cf.record.yfun.top ，节点基本都是上面的，但偶尔会改变。 可能会遇到的情况：无法正常签发 SSL 证书 常见问题无法正常签发 SSL 证书？CloudFlare 默认会提供免费 SSL 证书服务，但使用「加速节点」可能导致无法正确签发。 解决方法：使用智能 DNS，将「境外」的记录解析至控制面板提供给您的官方地址。 开启 SSL 后访问错误？试着为源站配置 SSL 证书，然后前往官方控制台（）将域名的 SSL 设为「完全」。 注意：使用「完全」方式请务必确定源站已开启 SSL！ 速度"},{"title":"利用 GitHub Action 自动部署 Hexo 博客","date":"2020-11-29T07:45:00.000Z","url":"/posts/2241387868.html","tags":[["博客","/tags/%E5%8D%9A%E5%AE%A2/"],["Hexo","/tags/Hexo/"],["GitHub","/tags/GitHub/"]],"categories":[["极客","/categories/%E6%9E%81%E5%AE%A2/"]],"content":"前言使用 Hexo 写博客，每次写完都要生成静态文件，而且 Hexo 基于 Node.JS，不能再手机上更新。 所以每次提交过后发现自己码错字了，或是有同学来换友链，总是要麻烦的改文件，再上传。 那么，Hexo 如何进行在线更新呢？ 如果使用服务器的话，就丧失了使用 Hexo 的最大的优点——节省开支，而且还不如用 Typecho/WordPress 呢。 后来突然想到 GitHub Action 可以实现在线打包等操作，就想试试在线生成 Hexo 博客。 行动获取 GitHub 令牌登录你的 GitHub 账号，点击右上角的头像，点击「Settings」进入设置。 点击菜单栏中的「Developer settings」进入开发者设置。 点击菜单栏中的「Personal access tokens」进入令牌设置。 点击「Generate new token」新建一个令牌。 勾选全部的权限，名称随意。 并点击「Generate token」完成生成。 记得保存好这个令牌，它不会再次出现。 新建仓库使用 GitHub 新建一个存放 Hexo 文件的仓库，要选私有仓库！ 不要勾选任何的初始化仓库选项！ 在 Hexo 根目录中删除 .git 文件夹(隐藏文件夹)，删除主题目录下的 .git 文件夹。 然后在 Hexo 根目录下使用 cmd 或终端运行以下命令： 配置 Github Action进入仓库页面，点击「Action」，点击「 set up a workflow yourself 」。 在左侧代码编辑器中将下方提供的代码粘贴进入代码框。 请仔细阅读注释，修改最后几行的提交设置。 确认无误后点击右上角的「Start Commit」。 此处注意！「公开的仓库名」是生成后文件提交的公开仓库，供「GitHub Pages」「Vercel」等服务使用！ 使用每次更改完文件过后，在 Hexo 根目录运行以下命令： 也可直接在仓库中 改文件/写博文 效果一样，GitHub 都会为你自动生成文件。"},{"title":"免费的图床","date":"2020-11-27T08:45:00.000Z","url":"/posts/3867215122.html","tags":[["博客","/tags/%E5%8D%9A%E5%AE%A2/"],["图床","/tags/%E5%9B%BE%E5%BA%8A/"]],"categories":[["极客","/categories/%E6%9E%81%E5%AE%A2/"]],"content":"前言本文将介绍一些免费的图床，可以供博客/日常使用。 每个图床都会给出测试链接供测试，无法访问或图片丢失则代表图床失效。 公共图床SM.MS 曾经图床的域名有备案并使用国内 CDN，但后来因为滥用被吊销。 现在使用的是 CloudFlare，国内访问效果不好甚至无法访问，不建议使用。 测试图片： 为避免影响访问速度，此处使用超链接，点击即可看到。 SM.MS 测试图片 Imgur 国外一家图片托管服务商，你可以选择注册或不注册，同样的，拖拽上传，永久保留，其SLA有着相当高的保证。 然而很可惜的是，Imgur 并不能在国内正常访问。你也可以尝试使用 #代理 解决 测试图片： 为避免影响访问速度，此处使用超链接，点击即可看到。 Imgur 测试图片 去不图床 由杜老师提供的个人公益图床，存储于阿里和腾讯的对象存储。 官方保证 SLA&gt;=99% ，目前来看是一个不错的选择。 当然，毕竟是个人维护的图床，能不能永久撑下去还是个问题。 如果您需要搭配 PicGo/uPic，请参考以下的配置： 测试图片： 去不图床所使用的 CDN 面向的是中国大陆，海外大概率解析到一些很辣鸡的节点。 路过图床 支持永久存储图片，全球CDN加速。官方宣称『图床从2011年至今都稳定运行』。 测试图片： Postimage Postimage 是一款来自国外的图床工具，支持按照一定大小缩放图片及设置图片自动删除。 在上传完成后，Postimage 会为你生成多种链接格式以满足不同需求。 Postimage 还会生成一个用于删除当前图片的链接，你只要访问那个链接即可将图片从服务器上删除。 测试图片： 折腾GitHub + jsDelivr网上有许多的教程，此处不再演示。 jsDelivr 非常稳定，国外使用 CloudFlare，国内有网宿节点，速度非常之快。 测试图片： NPM + 镜像我们可以使用 NPM 作为图床的储存。 再搭配上各种镜像调用，速度扛扛滴。 使用方法 您应该拥有基本的 npm 环境，如没有，请安装。安装教程可以参阅互联网，有很多可供参考。 首先，新建一个文件夹存放文件。 然后打开 cmd 或 终端，进入目录并输入以下命令 登录 NPM ： 如果没有账号的，请前往 NPM 注册账号 紧接着输入以下命令： 请注意，如果你之前用过淘宝镜像，那么请先手动切回官方源： 每次更新完包内存放的图片后，你应该修改 package.json 文件内的版本号（向上增加），然后再次运行 npm publish 发布包。 推荐的镜像 测试图片 图片太多，这里使用超链接，点击就可以看到。 jsDelivr：jsDelivr+NPM 知乎：知乎+NPM 百度：百度+NPM 饿了么：饿了么+NPM LeanCloud / 注册一个 LeanCloud 账号，此处不再赘述。 创建一个 App，进入 存储 -&gt; 文件，点击「上传」并上传图片。 上传成功后会在文件列表中显示，在列表中我们可以看到 URL 地址。 测试链接： 笔者使用国际版，为避免拖慢网站加载速度，使用超链接，点击即可看到。 LeanCloud 测试链接 (国际版) UniCloud 注册一个 UniCloud 账号并登录，此处不再赘述。 创建一个服务空间，选择『阿里云』并起个名字。（选择阿里云不收费） 进入「云存储」，点击「上传文件」。 点击右侧的「详情」即可查看图片地址，预览等信息。 测试图片： 代理Imgur 在国内已经无法访问了，但是，我们可以利用服务器代理啊！ 我们就以代理 Imgur 的图片为例，原链接： 测试图片： 图片太多，这里使用超链接，点击就可以看到。 此处的序号对应上方代理列表的序号 [1] [2] [3] [4]"},{"title":"使用 Vercel 部署静态网站","date":"2020-11-23T10:22:13.000Z","url":"/posts/2979788395.html","tags":[["博客","/tags/%E5%8D%9A%E5%AE%A2/"]],"categories":[["极客","/categories/%E6%9E%81%E5%AE%A2/"]],"content":"注册账号使用浏览器访问： 点击「Cotinue with GitHub」并使用 GitHub 账号注册。 无法注册账号？ Vercel 不支持 163/QQ 等国内邮箱的注册，请使用 Outlook 邮箱 再次注册 GitHub 后使用新 GitHub 账号注册！ 创建代码仓库新建 GitHub 代码仓库，并在代码仓库中新建 index.html 文件，这将作为首页。 在 index.html 文件中填写基本的代码内容，如： 使用 Vercel 部署点击控制台右上角的「Import Project」 点击「Import Git Repository」下方的「Continue」 输入 GitHub 仓库的地址并点击「Continue」 经过基本配置后，项目就会自动部署。 点击项目控制台的「View Domain」进入域名配置 默认会提供 *.vercel.app 免费域名，也可以免费添加自己的域名。 目前新项目已经更换为 *.vercel.app 域名，如仍需要 *.now.sh 域名，可以直接填写，实测可以使用。例如我需要使用 test-page-123.now.sh 域名，那么我只需要在自定义域名处填写并点击「Add」即可。 "}]